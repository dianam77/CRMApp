// <auto-generated />
using System;
using CRMApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMApp.Migrations
{
    [DbContext(typeof(CRMAppDbContext))]
    [Migration("20250721063052_FixCascadeDelete")]
    partial class FixCascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRMApp.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CRMApp.Models.ContactPhone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneId"));

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("ContactPhones");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerCompany", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EconomicCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndustryField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerCompanies");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerCompanyRelation", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<int>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RelationId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("CustomerCompanyRelations");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerIndividual", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerIndividuals");
                });

            modelBuilder.Entity("CRMApp.Models.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<int?>("CompanyCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("EmailId");

                    b.HasIndex("CompanyCustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("CRMApp.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CRMApp.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CRMApp.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("CRMApp.Models.Address", b =>
                {
                    b.HasOne("CRMApp.Models.CustomerCompany", "CompanyCustomer")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRMApp.Models.CustomerIndividual", "IndividualCustomer")
                        .WithMany("Addresses")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("CRMApp.Models.ContactPhone", b =>
                {
                    b.HasOne("CRMApp.Models.CustomerCompany", "CompanyCustomer")
                        .WithMany("ContactPhones")
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRMApp.Models.CustomerIndividual", "IndividualCustomer")
                        .WithMany("ContactPhones")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerCompanyRelation", b =>
                {
                    b.HasOne("CRMApp.Models.CustomerCompany", "CompanyCustomer")
                        .WithMany("CustomerCompanyRelations")
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMApp.Models.CustomerIndividual", "IndividualCustomer")
                        .WithMany("CustomerCompanyRelations")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyCustomer");

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("CRMApp.Models.Email", b =>
                {
                    b.HasOne("CRMApp.Models.CustomerCompany", "CompanyCustomer")
                        .WithMany("Emails")
                        .HasForeignKey("CompanyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRMApp.Models.CustomerIndividual", "IndividualCustomer")
                        .WithMany("Emails")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyCustomer");

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("CRMApp.Models.UserRole", b =>
                {
                    b.HasOne("CRMApp.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMApp.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerCompany", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactPhones");

                    b.Navigation("CustomerCompanyRelations");

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("CRMApp.Models.CustomerIndividual", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ContactPhones");

                    b.Navigation("CustomerCompanyRelations");

                    b.Navigation("Emails");
                });

            modelBuilder.Entity("CRMApp.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CRMApp.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
